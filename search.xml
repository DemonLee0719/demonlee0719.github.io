<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/03/06/kubernetes/"/>
      <url>/2021/03/06/kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><p><code>kubernetes</code>是一个可以自动实施容器操作的开源平台。生产化的容器编排系统，可自动部署，扩展和管理容器化应用。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li>namespaces 名称空间 ：资源隔离，UTS、IPC、PID、NETWORK、MOUNT、USER。。。</li><li>control Group 控制组：资源管理</li></ol><p>功能：资源限制、优先级分配、资源统计、任务控制</p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><ul><li><p><code>etcd</code>：</p><ol><li>保存了整个集群的状态，网络配置，对象状态信息及调度等信息；</li><li>基于Raft协议的分布式一致性KV存储；</li></ol></li><li><p><code>apiserver</code>：提供了k8s各类资源对象（pod,RC,Service等）的增删改查及watch等HTTP Rest接口，是整个系统的数据总线和数据中心。 </p><ol><li>提供了集群管理的REST API接口(包括认证授权、数据校验以及集群状态变更)；</li><li>提供其他模块之间的数据交互和通信的枢纽（其他模块通过API Server查询或修改数据，只有API Server才直接操作etcd）;</li><li>是资源配额控制的入口；</li><li>拥有完备的集群安全机制.</li></ol><p><code>list-watch机制</code>： </p><pre><code>1. `list`非常好理解，就是调用资源的`list API`罗列资源，基于`HTTP`短链接`实现` ; 2.  `watch`则是调用资源的`watch API`监听资源变更事件，基于`HTTP 长链接`实现` ,会带上watch=true，监听资源的相关事件，有事件来临会返回一个WatchEvent</code></pre></li></ul><ul><li><p><code>controller manager</code>：</p><p>负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</p></li><li><p><code>scheduler</code>：负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</p></li><li><p><code>Dashboard</code>：提供GUI</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/06/kubernetes/kubernetes-master-arch.png" alt="kubernetes-master-arch"></p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li><code>kubelet</code>：<ol><li>负责维护容器的生命周期，同时也负责Volume（CSI）和网络（CNI）的管理</li><li>处理master下发到本节点的任务，管理pod和pod中的容器</li><li>定期向master汇报状态</li><li>通过 cadvisor 组件监控节点和容器的使用情况 </li></ol></li><li><code>Container runtime</code>：<ol><li>负责镜像管理以及Pod和容器的真正运行（CRI：容器和镜像的服务的接口）；</li></ol></li><li><code>kube-proxy</code>：负责为Service提供cluster内部的服务发现和负载均衡；</li><li><code>Ingress Controller</code>：为服务提供外网入口</li><li><code>Prometheus</code>：提供资源监控</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/06/kubernetes/kubernetes-node-arch.png" alt="kubernetes-node-arch"></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/06/kubernetes/kubernetes-high-level-component-archtecture.jpg" alt="kubernetes-high-level-component-archtecture"></p><ol><li>用户通过<code>kubectl</code>或者对外的restapi来进行操作，如部署新的应用</li><li>API Server接受到请求，将请求存储到<code>etcd</code>中</li><li>Watcher和Controller检测资源状态的变化，做出相应的操作</li><li>Controller根据请求进行控制，将创建出符合预期的pod</li><li>Scheduler将新的Pod分配到<code>Kubelet</code></li><li>Kebelet检测到Pods,通过<code>Container runtime</code>部署</li><li>KubePorxy管理pod的网关，其中包含服务发现，负载均衡等</li></ol><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/06/kubernetes/kubernetes-pod-life-cycle.jpg" alt="pod-life-cycle"></p><p>  1.一组紧密关联的容器集合</p><ol start="2"><li>共享PID, IPC, Network, namespace</li><li>k8s调度的基本单位</li><li>将会调度到<code>Node</code>中</li></ol><h3 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h3><p> Node 是 Kubernetes 集群的工作节点，可以是物理机也可以是虚拟机。</p><p>节点管理： </p><pre><code>1. 禁止调度：`kubectl cordon &lt;node&gt;` 2. 驱逐节点中的Pod：`kubectl drain &lt;node&gt;`</code></pre><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>提供独立的命名空间，因此可以实现部分的环境隔离 </p><h3 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h3><pre><code>1. 可以标记任何对象2. K-V形式</code></pre><h4 id="label-selectors"><a href="#label-selectors" class="headerlink" title="label selectors"></a>label selectors</h4><pre><code>1. equality-based ：可以使用=、==、!=操作符，可以使用逗号分隔多个表达式2. set-based ：可以使用in、notin、!操作符，另外还可以没有操作符，直接写出某个label的key，表示过滤有某个 key的object而不管该key的value是何值，!表示没有该label的object</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>使用pod模板中的实际需要创建pod,并保证某种期望运行，提供副本管理，滚动升级，集群级别的自愈</p><h4 id="ReplicationController"><a href="#ReplicationController" class="headerlink" title="ReplicationController"></a>ReplicationController</h4><p>​    确保指定的pod数运行，仅支持equality-based selector</p><h4 id="ReplicationSet"><a href="#ReplicationSet" class="headerlink" title="ReplicationSet"></a>ReplicationSet</h4><p>​    RC的升级版，可以支持set-based selector</p><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>声明式的方式通过 <code>ReplicationSet</code>来管理Pods</li><li>可以实现灰度发布升级等</li><li>扩缩容</li></ol><h4 id="StatuefulSet"><a href="#StatuefulSet" class="headerlink" title="StatuefulSet"></a>StatuefulSet</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> <span class="token string">"nginx"</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> gcr.io/google_containers/nginx<span class="token punctuation">-</span>slim<span class="token punctuation">:</span><span class="token number">0.8</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> web        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> www          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/nginx/html  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> www      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">volume.beta.kubernetes.io/storage-class</span><span class="token punctuation">:</span> anything    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>保证部署和 scale 的顺序 </li><li>解决有状态服务的问题 </li></ol><h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><ol><li>确保全部（或者一些）Node 上运行一个 Pod 的副本 </li></ol><h4 id="Job-CronJob。。。"><a href="#Job-CronJob。。。" class="headerlink" title="Job CronJob。。。"></a>Job CronJob。。。</h4><h4 id="Node-Controller"><a href="#Node-Controller" class="headerlink" title="Node Controller"></a>Node Controller</h4><p>节点控制器</p><p>操作：节点隔离，节点驱逐，节点恢复等</p><h3 id="CRD-（-CustomResourceDefinition-）"><a href="#CRD-（-CustomResourceDefinition-）" class="headerlink" title="CRD （ CustomResourceDefinition ）"></a>CRD （ CustomResourceDefinition ）</h3><p>参考链接：<code>https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/</code></p><p>Kubernetes 1.7 之后增加了对 CRD 自定义资源二次开发能力来扩展 Kubernetes API，通过 CRD 我们可以向 Kubernetes API 中增加新资源类型，而不需要修改 Kubernetes 源码来创建自定义的 API server，该功能大大提高了 Kubernetes 的扩展能力。当你创建一个新的CustomResourceDefinition (CRD)时，Kubernetes API服务器将为你指定的每个版本创建一个新的RESTful资源路径，我们可以根据该api路径来创建一些我们自己定义的类型资源。CRD可以是命名空间的，也可以是集群范围的，由CRD的作用域(scpoe)字段中所指定的，与现有的内置对象一样，删除名称空间将删除该名称空间中的所有自定义对象。customresourcedefinition本身没有名称空间，所有名称空间都可以使用。 </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apiextensions.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CustomResourceDefinition<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># name must match the spec fields below, and be in the form: &lt;plural>.&lt;group></span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> crontabs.stable.example.com<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># group name to use for REST API: /apis/&lt;group>/&lt;version></span>  <span class="token key atrule">group</span><span class="token punctuation">:</span> stable.example.com  <span class="token comment" spellcheck="true"># list of versions supported by this CustomResourceDefinition</span>  <span class="token key atrule">versions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> v1      <span class="token comment" spellcheck="true"># Each version can be enabled/disabled by Served flag.</span>      <span class="token key atrule">served</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment" spellcheck="true"># One and only one version must be marked as the storage version.</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">schema</span><span class="token punctuation">:</span>        <span class="token key atrule">openAPIV3Schema</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> object          <span class="token key atrule">properties</span><span class="token punctuation">:</span>            <span class="token key atrule">spec</span><span class="token punctuation">:</span>              <span class="token key atrule">type</span><span class="token punctuation">:</span> object              <span class="token key atrule">properties</span><span class="token punctuation">:</span>                <span class="token key atrule">cronSpec</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">image</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> string                <span class="token key atrule">replicas</span><span class="token punctuation">:</span>                  <span class="token key atrule">type</span><span class="token punctuation">:</span> integer  <span class="token comment" spellcheck="true"># either Namespaced or Cluster</span>  <span class="token key atrule">scope</span><span class="token punctuation">:</span> Namespaced  <span class="token key atrule">names</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># plural name to be used in the URL: /apis/&lt;group>/&lt;version>/&lt;plural></span>    <span class="token key atrule">plural</span><span class="token punctuation">:</span> crontabs    <span class="token comment" spellcheck="true"># singular name to be used as an alias on the CLI and for display</span>    <span class="token key atrule">singular</span><span class="token punctuation">:</span> crontab    <span class="token comment" spellcheck="true"># kind is normally the CamelCased singular type. Your resource manifests use this.</span>    <span class="token key atrule">kind</span><span class="token punctuation">:</span> CronTab    <span class="token comment" spellcheck="true"># shortNames allow shorter string to match your resource on the CLI</span>    <span class="token key atrule">shortNames</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/12/08/docker-ming-ling/"/>
      <url>/2020/12/08/docker-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h3><pre><code>docker 启动容器eg:docker run --name mynginx -p 8081:80 -d nginx</code></pre><p>docker 启动容器</p><pre class="line-numbers language-angular2"><code class="language-angular2">运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KONG适配mysql</title>
      <link href="/2020/05/03/kong-1.3-gua-pei-mysql5.6/"/>
      <url>/2020/05/03/kong-1.3-gua-pei-mysql5.6/</url>
      
        <content type="html"><![CDATA[<h1 id="KONG-1-3适配mysql5-6"><a href="#KONG-1-3适配mysql5-6" class="headerlink" title="KONG 1.3适配mysql5.6"></a>KONG 1.3适配mysql5.6</h1><h2 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h2><p>API网关KONG是一个开源项目，详见 <a href="https://docs.konghq.com/" target="_blank" rel="noopener">KONG官方文档</a></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>api网关KONG数据库目前只支持postgres和Cassandra，还有无数据库dbless。对于mysql没有支持，由于公司大佬要求需要统一数据库mysql，所以只能基于kong1.3支持mysql。</p><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>mysql适配仅限于kong1.3版本。<br>主要代码部分在kong/db/strategies/mysql文件下，其中connector.lua文件主要适配，支持kong使用mysql。其中很多代码是借鉴postgres，若你下载我们适配的kong-mysql-support1.3，你会在mysql下看到很多postgres的影子，在kong/tools文件下还有借鉴章亦春大佬的mysql.lua，openresty中连接mysql的一个工具，有一些细微改动。<br><a href="https://github.com/DemonLee0719/kong-mysql-support-1.3.0" target="_blank" rel="noopener">GitHub代码地址</a></p><h3 id="kong代码导读"><a href="#kong代码导读" class="headerlink" title="kong代码导读"></a>kong代码导读</h3><p>kong网关很多优秀的特性，如可扩展性，模块化，可移植性，插件机制等等这里不再详细描述，请参考官方文档 <a href="https://docs.konghq.com/" target="_blank" rel="noopener">KONG官方文档</a>，这里不再搬运。</p><h4 id="kong项目代码结构"><a href="#kong项目代码结构" class="headerlink" title="kong项目代码结构"></a>kong项目代码结构</h4><p>kong/api：KONG主要对外的api管理，如service，routes等等，可以通过restful接口用于注册管理api等。定义模块的类型和格式，初度kong源码会有一些迷，比如，kong的关于路由route的接口是怎么实现的，就在kong/api下由模块统一管理。<br>kong/cluster_events：该目录下，是对于kong的event事件做统一同步，若你是通过k8s或者其他可节点方式部署，多节点信息同步实现在该文件下实现。可以在配置项db_update_frequency = 5，官方默认配置为5秒同步。当其他节点的信息有变动时，会把改动的数据写入到数据库中，有一个cluster_events表，当kong的实体，如service，route通过restful接口变动时，会将变动数据写入，其他节点会每5秒拉去数据，同步。<br>添加文件 kong/cluster_events/strategies/mysql.lua </p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> utils  <span class="token operator">=</span> require <span class="token string">"kong.tools.utils"</span><span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"kong.tools.mysql"</span><span class="token keyword">local</span> pgmoon <span class="token operator">=</span> require <span class="token string">"pgmoon"</span><span class="token keyword">local</span> max          <span class="token operator">=</span> math<span class="token punctuation">.</span>max<span class="token keyword">local</span> fmt          <span class="token operator">=</span> string<span class="token punctuation">.</span>format<span class="token keyword">local</span> null         <span class="token operator">=</span> ngx<span class="token punctuation">.</span>null<span class="token keyword">local</span> concat       <span class="token operator">=</span> table<span class="token punctuation">.</span>concat<span class="token keyword">local</span> setmetatable <span class="token operator">=</span> setmetatable<span class="token keyword">local</span> new_tab<span class="token keyword">do</span>  <span class="token keyword">local</span> ok  ok<span class="token punctuation">,</span> new_tab <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"table.new"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>    new_tab <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>narr<span class="token punctuation">,</span> nrec<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> INSERT_QUERY <span class="token operator">=</span> <span class="token string">[[INSERT INTO cluster_events(`id`, `node_id`, at, nbf, expire_at, channel, data) VALUES(%s, %s, FROM_UNIXTIME(%f), FROM_UNIXTIME(%s), FROM_UNIXTIME(%s), %s, %s)]]</span><span class="token keyword">local</span> SELECT_INTERVAL_QUERY <span class="token operator">=</span> <span class="token string">[[SELECT `id`, `node_id`, channel, data, UNIX_TIMESTAMP(at) as at, UNIX_TIMESTAMP(nbf) as  nbfFROM cluster_eventsWHERE channel IN (%s)  AND at >  FROM_UNIXTIME(%f)  AND at &lt;= FROM_UNIXTIME(%f)]]</span><span class="token keyword">local</span> _M <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span> __index <span class="token operator">=</span> _M <span class="token punctuation">}</span><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> page_size<span class="token punctuation">,</span> event_ttl<span class="token punctuation">)</span>  <span class="token keyword">local</span> self  <span class="token operator">=</span> <span class="token punctuation">{</span>    db        <span class="token operator">=</span> db<span class="token punctuation">.</span>connector<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--page_size = page_size,</span>    event_ttl <span class="token operator">=</span> event_ttl<span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">should_use_polling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span>node_id<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> at<span class="token punctuation">,</span> data<span class="token punctuation">,</span> nbf<span class="token punctuation">)</span>  <span class="token keyword">local</span> expire_at <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>at <span class="token operator">+</span> self<span class="token punctuation">.</span>event_ttl<span class="token punctuation">,</span> at<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> nbf <span class="token keyword">then</span>    nbf <span class="token operator">=</span> <span class="token string">"NULL"</span>  <span class="token keyword">end</span>  <span class="token keyword">local</span> my_id      <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> my_node_id <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>node_id<span class="token punctuation">)</span>  <span class="token keyword">local</span> my_channel <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span>  <span class="token keyword">local</span> my_data    <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">local</span> q <span class="token operator">=</span> <span class="token function">fmt</span><span class="token punctuation">(</span>INSERT_QUERY<span class="token punctuation">,</span> my_id<span class="token punctuation">,</span> my_node_id<span class="token punctuation">,</span> at<span class="token punctuation">,</span> nbf<span class="token punctuation">,</span> expire_at<span class="token punctuation">,</span>    my_channel<span class="token punctuation">,</span> my_data<span class="token punctuation">)</span>  <span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> res <span class="token keyword">then</span>    <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"could not insert invalidation row: "</span> <span class="token operator">..</span> err  <span class="token keyword">end</span>  <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">select_interval</span><span class="token punctuation">(</span>channels<span class="token punctuation">,</span> min_at<span class="token punctuation">,</span> max_at<span class="token punctuation">)</span>  <span class="token keyword">local</span> n_chans <span class="token operator">=</span> <span class="token operator">#</span>channels  <span class="token keyword">local</span> my_channels <span class="token operator">=</span> <span class="token function">new_tab</span><span class="token punctuation">(</span>n_chans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n_chans <span class="token keyword">do</span>    my_channels<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pgmoon<span class="token punctuation">.</span>Postgres<span class="token punctuation">.</span><span class="token function">escape_literal</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> channels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token keyword">local</span> q <span class="token operator">=</span> <span class="token function">fmt</span><span class="token punctuation">(</span>SELECT_INTERVAL_QUERY<span class="token punctuation">,</span> <span class="token function">concat</span><span class="token punctuation">(</span>my_channels<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min_at<span class="token punctuation">,</span>    max_at<span class="token punctuation">)</span>  <span class="token keyword">local</span> ran  <span class="token comment" spellcheck="true">-- TODO: implement pagination for this strategy as</span>  <span class="token comment" spellcheck="true">-- well.</span>  <span class="token comment" spellcheck="true">--</span>  <span class="token comment" spellcheck="true">-- we need to behave like lua-cassandra's iteration:</span>  <span class="token comment" spellcheck="true">-- provide an iterator that enters the loop, with a</span>  <span class="token comment" spellcheck="true">-- page = 0 argument if there is no first page, and a</span>  <span class="token comment" spellcheck="true">-- page = 1 argument with the fetched rows elsewise</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> p_rows<span class="token punctuation">)</span>    <span class="token keyword">if</span> ran <span class="token keyword">then</span>      <span class="token keyword">return</span> <span class="token keyword">nil</span>    <span class="token keyword">end</span>    <span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> res <span class="token keyword">then</span>      <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> err    <span class="token keyword">end</span>    <span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token operator">#</span>res    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token keyword">do</span>      <span class="token keyword">local</span> row <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> row<span class="token punctuation">.</span>nbf <span class="token operator">==</span> null <span class="token keyword">then</span>        row<span class="token punctuation">.</span>nbf <span class="token operator">=</span> <span class="token keyword">nil</span>      <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">local</span> page <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">0</span>    ran <span class="token operator">=</span> <span class="token keyword">true</span>    <span class="token keyword">return</span> res<span class="token punctuation">,</span> err<span class="token punctuation">,</span> page  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">truncate_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"TRUNCATE cluster_events"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> _M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/cmd： 当前目录下是kong相关命令是实现，这里不再详细描述。<br>相关命令参考kong/cmd/init.lua</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"kong.globalpatches"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>cli <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- Generate PRNG seed</span><span class="token keyword">local</span> pl_app <span class="token operator">=</span> require <span class="token string">"pl.lapp"</span><span class="token keyword">local</span> log <span class="token operator">=</span> require <span class="token string">"kong.cmd.utils.log"</span><span class="token keyword">local</span> options <span class="token operator">=</span> <span class="token string">[[ --v              verbose --vv             debug]]</span><span class="token keyword">local</span> cmds_arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">local</span> cmds <span class="token operator">=</span> <span class="token punctuation">{</span>  start <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  stop <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  quit <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  restart <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  reload <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  health <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  check <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  prepare <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  migrations <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  version <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  config <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  roar <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/db：该目录下是kong对数据库的支持，适配mysql中的主要工作在此，需要对很多数据层做支持，还有sql语句改写，以及相关策略改动<br>kong/db/migrations/core下是在执行kong migrations bootstraps时会初始化数据表，当前提是当前连接的数据库中有kong这个一个数据库，不然会报错。<br>kong/db/strategies下是度数据库选择策略的适配，官方目前有Cassandra，postgres,off，这里对mysql做了适配。可放心使用。</p><p>kong/pdk： 该目录下的文件是对kong有开发需求的开发人员提供特定的pdk方法，若想要开发相关插件，需要关注这个一块。话说，kong官方的插件很多还是需要自己二次开发滴！！！</p><p>kong/plugins：该目录下放着需要的一些插件，可以在当前目录下开发自己自定义的插件。请参考kong插件开发规范开发插件，比较容易。插件的使用导入需要在kong/constants.lua文件中体现<br>kong/constants.lua部分代码</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> plugins <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"jwt"</span><span class="token punctuation">,</span>  <span class="token string">"acl"</span><span class="token punctuation">,</span>  <span class="token string">"correlation-id"</span><span class="token punctuation">,</span>  <span class="token string">"cors"</span><span class="token punctuation">,</span>  <span class="token string">"oauth2"</span><span class="token punctuation">,</span>  <span class="token string">"tcp-log"</span><span class="token punctuation">,</span>  <span class="token string">"udp-log"</span><span class="token punctuation">,</span>  <span class="token string">"file-log"</span><span class="token punctuation">,</span>  <span class="token string">"http-log"</span><span class="token punctuation">,</span>  <span class="token string">"key-auth"</span><span class="token punctuation">,</span>  <span class="token string">"hmac-auth"</span><span class="token punctuation">,</span>  <span class="token string">"basic-auth"</span><span class="token punctuation">,</span>  <span class="token string">"ip-restriction"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">--"request-transformer",</span>  <span class="token string">"response-transformer"</span><span class="token punctuation">,</span>  <span class="token string">"request-size-limiting"</span><span class="token punctuation">,</span>  <span class="token string">"rate-limiting"</span><span class="token punctuation">,</span>  <span class="token string">"response-ratelimiting"</span><span class="token punctuation">,</span>  <span class="token string">"syslog"</span><span class="token punctuation">,</span>  <span class="token string">"loggly"</span><span class="token punctuation">,</span>  <span class="token string">"datadog"</span><span class="token punctuation">,</span>  <span class="token string">"ldap-auth"</span><span class="token punctuation">,</span>  <span class="token string">"statsd"</span><span class="token punctuation">,</span>  <span class="token string">"bot-detection"</span><span class="token punctuation">,</span>  <span class="token string">"aws-lambda"</span><span class="token punctuation">,</span>  <span class="token string">"request-termination"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">-- external plugins</span>  <span class="token comment" spellcheck="true">--"azure-functions",</span>  <span class="token comment" spellcheck="true">--"kubernetes-sidecar-injector",</span>  <span class="token comment" spellcheck="true">--"zipkin",</span>  <span class="token comment" spellcheck="true">--"pre-function",</span>  <span class="token comment" spellcheck="true">--"post-function",</span>  <span class="token comment" spellcheck="true">--"prometheus",</span>  <span class="token comment" spellcheck="true">--"proxy-cache",</span>  <span class="token comment" spellcheck="true">--"session",</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/resty：当前目录是加载相关openresty 的某些文件，没有详细研究</p><p>kong/runloop：此目录下的文件上kong主要和nginx交互的文件目录，相关api注册还有路由转发，环平衡，健康检查等相关在这。</p><p>kong/templates：当前目录下是配置一些nginx的文件，通过导入，直接配置到nginx.conf文件。</p><p>kong/tools：工具类目录</p><p>kong/route.lua：该lua主要服务kong的路由转发还有就是一些初始化路由检查，路由加载等。</p><p>更多需要详细阅读源码，这里只浅显解读一下。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="0运行容器不退出，调试需要"><a href="#0运行容器不退出，调试需要" class="headerlink" title="0运行容器不退出，调试需要"></a>0运行容器不退出，调试需要</h3><pre class="line-numbers language-shell"><code class="language-shell">docker run -itd --rm  kong:1.3 /bin/bash -c "while true;do echo hello docker;sleep 1;done"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1重启docker"><a href="#1重启docker" class="headerlink" title="1重启docker"></a>1重启docker</h3><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reload && systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>postgres 镜像： postgres:9.6 （自行dockerhub下载）<br>kong 1.3版本镜像： kong:1.3 （自行dockerhub下载）<br>mysql镜像： mysql:5.6          （自行dockerhub下载）<br>kong-mysql适配镜像： kong-mysql-support:1.3<br>这个dockerfile比较简单粗暴，代码仓库中很多插件都屏蔽了，若读者想要添加一些我在代码中屏蔽的插件，需要自行适配mysql</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM kong:1.3RUN rm -rf /usr/local/share/lua/5.1/kongCOPY kong /usr/local/share/lua/5.1/kong<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="postgres-kong-官方docker部署方式"><a href="#postgres-kong-官方docker部署方式" class="headerlink" title="postgres + kong 官方docker部署方式"></a>postgres + kong 官方docker部署方式</h2><p>#1 创建本地卷pgdata</p><pre class="line-numbers language-bash"><code class="language-bash">docker volume create pgdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#2 创建kong-net-postgres</p><pre class="line-numbers language-bash"><code class="language-bash">docker network create kong-net-postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#3 创建 pg-kong 容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name pg-kong  \         --network<span class="token operator">=</span>kong-net-postgres  \         -v pgdate:/var/postgres/data \         -p 5432:5432 \         -e <span class="token string">"POSTGRES_U SER=kong"</span> \         -e <span class="token string">"POSTGRES_DB=kong"</span> \         -e <span class="token string">"POSTGRES_PASSWORD=kong"</span> \         postgres:9.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#4 初始化kong在pg中的数据库</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --rm \     --network<span class="token operator">=</span>kong-net-postgres \     -e <span class="token string">"KONG_DATABASE=postgres"</span> \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>   \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     kong:1.3 kong migrations bootstrap --vv <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#5 启动kong容器<br>##1 开放管理端口，为了好调试，开放所有端口，生成环境不建议这么做。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-postgres  \     --network<span class="token operator">=</span>kong-net-postgres    \     -e <span class="token string">"KONG_DATABASE=postgres"</span>    \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>      \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:18001, 0.0.0.0:18444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:18000, 0.0.0.0:18443 ssl"</span> \     -p 18000:18000 \     -p 18443:18443 \     -p 18001:18001 \     -p 18444:18444 \     kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##2关闭管理端口，建议生产环境配置</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-postgres  \     --network<span class="token operator">=</span>kong-net-postgres    \     -e <span class="token string">"KONG_DATABASE=postgres"</span>    \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>      \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:18001, 0.0.0.0:18444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:18000, 0.0.0.0:18443 ssl"</span> \     -p 18000:18000 \     -p 18443:18443 \     -p 127.0.0.1:18001:18001 \     -p 127.0.0.1:18444:18444 \     kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql-kong-mysql适配版"><a href="#mysql-kong-mysql适配版" class="headerlink" title="mysql + kong  mysql适配版"></a>mysql + kong  mysql适配版</h2><p>#1 创建本地卷mysqldata<br>docker volume create mysqldata<br>#2 创建kong-net-mysql<br>docker network create kong-net-mysql<br>#3 创建 mysql-kong 容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name mysql-kong \               --network<span class="token operator">=</span>kong-net-mysql \               -v mysqldata:/var/mysql/data \               -p 3306:3306 \               -e <span class="token string">"MYSQL_USER=kong"</span> \               -e <span class="token string">"MYSQL_DB=kong"</span> \               -e <span class="token string">"MYSQL_PASSWORD=kong"</span> \               demonlee/mysql:5.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#4 初始化kong在mysql中的数据库</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --rm \     --network<span class="token operator">=</span>kong-net-mysql \     -e <span class="token string">"KONG_DATABASE=mysql"</span> \     -e <span class="token string">"KONG_MYSQL_HOST=mysql-kong"</span> \     -e <span class="token string">"KONG_MYSQL_PASSWORD=kong"</span> \     demonlee/kong:1.3 kong migrations bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#5 启动kong容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-mysql \     --network<span class="token operator">=</span>kong-net-mysql \     -e <span class="token string">"KONG_DATABASE=mysql"</span> \     -e <span class="token string">"KONG_MYSQL_HOST=mysql-kong"</span> \     -e <span class="token string">"KONG_MYSQL_PASSWORD=kong"</span> \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:28001, 0.0.0.0:28444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:28000, 0.0.0.0:28443 ssl"</span> \     -p 28000:28000 \     -p 28443:28443 \     -p 28001:28001 \     -p 28444:28444 \     demonlee/kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> API 网关KONG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
