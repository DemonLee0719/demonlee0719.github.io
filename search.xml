<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KONG部署</title>
      <link href="/2020/05/03/kong-1.3-gua-pei-mysql5.6/"/>
      <url>/2020/05/03/kong-1.3-gua-pei-mysql5.6/</url>
      
        <content type="html"><![CDATA[<h1 id="KONG-1-3适配mysql5-6"><a href="#KONG-1-3适配mysql5-6" class="headerlink" title="KONG 1.3适配mysql5.6"></a>KONG 1.3适配mysql5.6</h1><h2 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h2><p>API网关KONG是一个开源项目，详见 <a href="https://docs.konghq.com/" target="_blank" rel="noopener">KONG官方文档</a></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>api网关KONG数据库目前只支持postgres和Cassandra，还有无数据库dbless。对于mysql没有支持，由于公司大佬要求需要统一数据库mysql，所以只能基于kong1.3支持mysql。</p><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>mysql适配仅限于kong1.3版本。<br>主要代码部分在kong/db/strategies/mysql文件下，其中connector.lua文件主要适配，支持kong使用mysql。其中很多代码是借鉴postgres，若你下载我们适配的kong-mysql-support1.3，你会在mysql下看到很多postgres的影子，在kong/tools文件下还有借鉴章亦春大佬的mysql.lua，openresty中连接mysql的一个工具，有一些细微改动。<br><a href="https://github.com/DemonLee0719/kong-mysql-support-1.3.0" target="_blank" rel="noopener">GitHub代码地址</a></p><h3 id="kong代码导读"><a href="#kong代码导读" class="headerlink" title="kong代码导读"></a>kong代码导读</h3><p>kong网关很多优秀的特性，如可扩展性，模块化，可移植性，插件机制等等这里不再详细描述，请参考官方文档 <a href="https://docs.konghq.com/" target="_blank" rel="noopener">KONG官方文档</a>，这里不再搬运。</p><h4 id="kong项目代码结构"><a href="#kong项目代码结构" class="headerlink" title="kong项目代码结构"></a>kong项目代码结构</h4><p>kong/api：KONG主要对外的api管理，如service，routes等等，可以通过restful接口用于注册管理api等。定义模块的类型和格式，初度kong源码会有一些迷，比如，kong的关于路由route的接口是怎么实现的，就在kong/api下由模块统一管理。<br>kong/cluster_events：该目录下，是对于kong的event事件做统一同步，若你是通过k8s或者其他可节点方式部署，多节点信息同步实现在该文件下实现。可以在配置项db_update_frequency = 5，官方默认配置为5秒同步。当其他节点的信息有变动时，会把改动的数据写入到数据库中，有一个cluster_events表，当kong的实体，如service，route通过restful接口变动时，会将变动数据写入，其他节点会每5秒拉去数据，同步。<br>添加文件 kong/cluster_events/strategies/mysql.lua </p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> utils  <span class="token operator">=</span> require <span class="token string">"kong.tools.utils"</span><span class="token keyword">local</span> mysql <span class="token operator">=</span> require <span class="token string">"kong.tools.mysql"</span><span class="token keyword">local</span> pgmoon <span class="token operator">=</span> require <span class="token string">"pgmoon"</span><span class="token keyword">local</span> max          <span class="token operator">=</span> math<span class="token punctuation">.</span>max<span class="token keyword">local</span> fmt          <span class="token operator">=</span> string<span class="token punctuation">.</span>format<span class="token keyword">local</span> null         <span class="token operator">=</span> ngx<span class="token punctuation">.</span>null<span class="token keyword">local</span> concat       <span class="token operator">=</span> table<span class="token punctuation">.</span>concat<span class="token keyword">local</span> setmetatable <span class="token operator">=</span> setmetatable<span class="token keyword">local</span> new_tab<span class="token keyword">do</span>  <span class="token keyword">local</span> ok  ok<span class="token punctuation">,</span> new_tab <span class="token operator">=</span> <span class="token function">pcall</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"table.new"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> ok <span class="token keyword">then</span>    new_tab <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>narr<span class="token punctuation">,</span> nrec<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">local</span> INSERT_QUERY <span class="token operator">=</span> <span class="token string">[[INSERT INTO cluster_events(`id`, `node_id`, at, nbf, expire_at, channel, data) VALUES(%s, %s, FROM_UNIXTIME(%f), FROM_UNIXTIME(%s), FROM_UNIXTIME(%s), %s, %s)]]</span><span class="token keyword">local</span> SELECT_INTERVAL_QUERY <span class="token operator">=</span> <span class="token string">[[SELECT `id`, `node_id`, channel, data, UNIX_TIMESTAMP(at) as at, UNIX_TIMESTAMP(nbf) as  nbfFROM cluster_eventsWHERE channel IN (%s)  AND at >  FROM_UNIXTIME(%f)  AND at &lt;= FROM_UNIXTIME(%f)]]</span><span class="token keyword">local</span> _M <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">local</span> mt <span class="token operator">=</span> <span class="token punctuation">{</span> __index <span class="token operator">=</span> _M <span class="token punctuation">}</span><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> page_size<span class="token punctuation">,</span> event_ttl<span class="token punctuation">)</span>  <span class="token keyword">local</span> self  <span class="token operator">=</span> <span class="token punctuation">{</span>    db        <span class="token operator">=</span> db<span class="token punctuation">.</span>connector<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">--page_size = page_size,</span>    event_ttl <span class="token operator">=</span> event_ttl<span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">should_use_polling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span>node_id<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> at<span class="token punctuation">,</span> data<span class="token punctuation">,</span> nbf<span class="token punctuation">)</span>  <span class="token keyword">local</span> expire_at <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>at <span class="token operator">+</span> self<span class="token punctuation">.</span>event_ttl<span class="token punctuation">,</span> at<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> nbf <span class="token keyword">then</span>    nbf <span class="token operator">=</span> <span class="token string">"NULL"</span>  <span class="token keyword">end</span>  <span class="token keyword">local</span> my_id      <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> my_node_id <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>node_id<span class="token punctuation">)</span>  <span class="token keyword">local</span> my_channel <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span>  <span class="token keyword">local</span> my_data    <span class="token operator">=</span> ngx<span class="token punctuation">.</span><span class="token function">quote_sql_str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">local</span> q <span class="token operator">=</span> <span class="token function">fmt</span><span class="token punctuation">(</span>INSERT_QUERY<span class="token punctuation">,</span> my_id<span class="token punctuation">,</span> my_node_id<span class="token punctuation">,</span> at<span class="token punctuation">,</span> nbf<span class="token punctuation">,</span> expire_at<span class="token punctuation">,</span>    my_channel<span class="token punctuation">,</span> my_data<span class="token punctuation">)</span>  <span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> res <span class="token keyword">then</span>    <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"could not insert invalidation row: "</span> <span class="token operator">..</span> err  <span class="token keyword">end</span>  <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">select_interval</span><span class="token punctuation">(</span>channels<span class="token punctuation">,</span> min_at<span class="token punctuation">,</span> max_at<span class="token punctuation">)</span>  <span class="token keyword">local</span> n_chans <span class="token operator">=</span> <span class="token operator">#</span>channels  <span class="token keyword">local</span> my_channels <span class="token operator">=</span> <span class="token function">new_tab</span><span class="token punctuation">(</span>n_chans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n_chans <span class="token keyword">do</span>    my_channels<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pgmoon<span class="token punctuation">.</span>Postgres<span class="token punctuation">.</span><span class="token function">escape_literal</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> channels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token keyword">local</span> q <span class="token operator">=</span> <span class="token function">fmt</span><span class="token punctuation">(</span>SELECT_INTERVAL_QUERY<span class="token punctuation">,</span> <span class="token function">concat</span><span class="token punctuation">(</span>my_channels<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min_at<span class="token punctuation">,</span>    max_at<span class="token punctuation">)</span>  <span class="token keyword">local</span> ran  <span class="token comment" spellcheck="true">-- TODO: implement pagination for this strategy as</span>  <span class="token comment" spellcheck="true">-- well.</span>  <span class="token comment" spellcheck="true">--</span>  <span class="token comment" spellcheck="true">-- we need to behave like lua-cassandra's iteration:</span>  <span class="token comment" spellcheck="true">-- provide an iterator that enters the loop, with a</span>  <span class="token comment" spellcheck="true">-- page = 0 argument if there is no first page, and a</span>  <span class="token comment" spellcheck="true">-- page = 1 argument with the fetched rows elsewise</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> p_rows<span class="token punctuation">)</span>    <span class="token keyword">if</span> ran <span class="token keyword">then</span>      <span class="token keyword">return</span> <span class="token keyword">nil</span>    <span class="token keyword">end</span>    <span class="token keyword">local</span> res<span class="token punctuation">,</span> err <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> res <span class="token keyword">then</span>      <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> err    <span class="token keyword">end</span>    <span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token operator">#</span>res    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token keyword">do</span>      <span class="token keyword">local</span> row <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> row<span class="token punctuation">.</span>nbf <span class="token operator">==</span> null <span class="token keyword">then</span>        row<span class="token punctuation">.</span>nbf <span class="token operator">=</span> <span class="token keyword">nil</span>      <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">local</span> page <span class="token operator">=</span> len <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">0</span>    ran <span class="token operator">=</span> <span class="token keyword">true</span>    <span class="token keyword">return</span> res<span class="token punctuation">,</span> err<span class="token punctuation">,</span> page  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">:</span><span class="token function">truncate_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> self<span class="token punctuation">.</span>db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"TRUNCATE cluster_events"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> _M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/cmd： 当前目录下是kong相关命令是实现，这里不再详细描述。<br>相关命令参考kong/cmd/init.lua</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"kong.globalpatches"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>cli <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- Generate PRNG seed</span><span class="token keyword">local</span> pl_app <span class="token operator">=</span> require <span class="token string">"pl.lapp"</span><span class="token keyword">local</span> log <span class="token operator">=</span> require <span class="token string">"kong.cmd.utils.log"</span><span class="token keyword">local</span> options <span class="token operator">=</span> <span class="token string">[[ --v              verbose --vv             debug]]</span><span class="token keyword">local</span> cmds_arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">local</span> cmds <span class="token operator">=</span> <span class="token punctuation">{</span>  start <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  stop <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  quit <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  restart <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  reload <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  health <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  check <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  prepare <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  migrations <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  version <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  config <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  roar <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/db：该目录下是kong对数据库的支持，适配mysql中的主要工作在此，需要对很多数据层做支持，还有sql语句改写，以及相关策略改动<br>kong/db/migrations/core下是在执行kong migrations bootstraps时会初始化数据表，当前提是当前连接的数据库中有kong这个一个数据库，不然会报错。<br>kong/db/strategies下是度数据库选择策略的适配，官方目前有Cassandra，postgres,off，这里对mysql做了适配。可放心使用。</p><p>kong/pdk： 该目录下的文件是对kong有开发需求的开发人员提供特定的pdk方法，若想要开发相关插件，需要关注这个一块。话说，kong官方的插件很多还是需要自己二次开发滴！！！</p><p>kong/plugins：该目录下放着需要的一些插件，可以在当前目录下开发自己自定义的插件。请参考kong插件开发规范开发插件，比较容易。插件的使用导入需要在kong/constants.lua文件中体现<br>kong/constants.lua部分代码</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">local</span> plugins <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"jwt"</span><span class="token punctuation">,</span>  <span class="token string">"acl"</span><span class="token punctuation">,</span>  <span class="token string">"correlation-id"</span><span class="token punctuation">,</span>  <span class="token string">"cors"</span><span class="token punctuation">,</span>  <span class="token string">"oauth2"</span><span class="token punctuation">,</span>  <span class="token string">"tcp-log"</span><span class="token punctuation">,</span>  <span class="token string">"udp-log"</span><span class="token punctuation">,</span>  <span class="token string">"file-log"</span><span class="token punctuation">,</span>  <span class="token string">"http-log"</span><span class="token punctuation">,</span>  <span class="token string">"key-auth"</span><span class="token punctuation">,</span>  <span class="token string">"hmac-auth"</span><span class="token punctuation">,</span>  <span class="token string">"basic-auth"</span><span class="token punctuation">,</span>  <span class="token string">"ip-restriction"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">--"request-transformer",</span>  <span class="token string">"response-transformer"</span><span class="token punctuation">,</span>  <span class="token string">"request-size-limiting"</span><span class="token punctuation">,</span>  <span class="token string">"rate-limiting"</span><span class="token punctuation">,</span>  <span class="token string">"response-ratelimiting"</span><span class="token punctuation">,</span>  <span class="token string">"syslog"</span><span class="token punctuation">,</span>  <span class="token string">"loggly"</span><span class="token punctuation">,</span>  <span class="token string">"datadog"</span><span class="token punctuation">,</span>  <span class="token string">"ldap-auth"</span><span class="token punctuation">,</span>  <span class="token string">"statsd"</span><span class="token punctuation">,</span>  <span class="token string">"bot-detection"</span><span class="token punctuation">,</span>  <span class="token string">"aws-lambda"</span><span class="token punctuation">,</span>  <span class="token string">"request-termination"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">-- external plugins</span>  <span class="token comment" spellcheck="true">--"azure-functions",</span>  <span class="token comment" spellcheck="true">--"kubernetes-sidecar-injector",</span>  <span class="token comment" spellcheck="true">--"zipkin",</span>  <span class="token comment" spellcheck="true">--"pre-function",</span>  <span class="token comment" spellcheck="true">--"post-function",</span>  <span class="token comment" spellcheck="true">--"prometheus",</span>  <span class="token comment" spellcheck="true">--"proxy-cache",</span>  <span class="token comment" spellcheck="true">--"session",</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kong/resty：当前目录是加载相关openresty 的某些文件，没有详细研究</p><p>kong/runloop：此目录下的文件上kong主要和nginx交互的文件目录，相关api注册还有路由转发，环平衡，健康检查等相关在这。</p><p>kong/templates：当前目录下是配置一些nginx的文件，通过导入，直接配置到nginx.conf文件。</p><p>kong/tools：工具类目录</p><p>kong/route.lua：该lua主要服务kong的路由转发还有就是一些初始化路由检查，路由加载等。</p><p>更多需要详细阅读源码，这里只浅显解读一下。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="0运行容器不退出，调试需要"><a href="#0运行容器不退出，调试需要" class="headerlink" title="0运行容器不退出，调试需要"></a>0运行容器不退出，调试需要</h3><pre class="line-numbers language-shell"><code class="language-shell">docker run -itd --rm  kong:1.3 /bin/bash -c "while true;do echo hello docker;sleep 1;done"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1重启docker"><a href="#1重启docker" class="headerlink" title="1重启docker"></a>1重启docker</h3><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reload && systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>postgres 镜像： postgres:9.6 （自行dockerhub下载）<br>kong 1.3版本镜像： kong:1.3 （自行dockerhub下载）<br>mysql镜像： mysql:5.6          （自行dockerhub下载）<br>kong-mysql适配镜像： kong-mysql-support:1.3<br>这个dockerfile比较简单粗暴，代码仓库中很多插件都屏蔽了，若读者想要添加一些我在代码中屏蔽的插件，需要自行适配mysql</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM kong:1.3RUN rm -rf /usr/local/share/lua/5.1/kongCOPY kong /usr/local/share/lua/5.1/kong<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="postgres-kong-官方docker部署方式"><a href="#postgres-kong-官方docker部署方式" class="headerlink" title="postgres + kong 官方docker部署方式"></a>postgres + kong 官方docker部署方式</h2><p>#1 创建本地卷pgdata</p><pre class="line-numbers language-bash"><code class="language-bash">docker volume create pgdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#2 创建kong-net-postgres</p><pre class="line-numbers language-bash"><code class="language-bash">docker network create kong-net-postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#3 创建 pg-kong 容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name pg-kong  \         --network<span class="token operator">=</span>kong-net-postgres  \         -v pgdate:/var/postgres/data \         -p 5432:5432 \         -e <span class="token string">"POSTGRES_U SER=kong"</span> \         -e <span class="token string">"POSTGRES_DB=kong"</span> \         -e <span class="token string">"POSTGRES_PASSWORD=kong"</span> \         postgres:9.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#4 初始化kong在pg中的数据库</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --rm \     --network<span class="token operator">=</span>kong-net-postgres \     -e <span class="token string">"KONG_DATABASE=postgres"</span> \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>   \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     kong:1.3 kong migrations bootstrap --vv <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#5 启动kong容器<br>##1 开放管理端口，为了好调试，开放所有端口，生成环境不建议这么做。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-postgres  \     --network<span class="token operator">=</span>kong-net-postgres    \     -e <span class="token string">"KONG_DATABASE=postgres"</span>    \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>      \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:18001, 0.0.0.0:18444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:18000, 0.0.0.0:18443 ssl"</span> \     -p 18000:18000 \     -p 18443:18443 \     -p 18001:18001 \     -p 18444:18444 \     kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##2关闭管理端口，建议生产环境配置</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-postgres  \     --network<span class="token operator">=</span>kong-net-postgres    \     -e <span class="token string">"KONG_DATABASE=postgres"</span>    \     -e <span class="token string">"KONG_PG_HOST=ps-kong"</span>      \     -e <span class="token string">"KONG_PG_PASSWORD=kong"</span>  \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span>  \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:18001, 0.0.0.0:18444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:18000, 0.0.0.0:18443 ssl"</span> \     -p 18000:18000 \     -p 18443:18443 \     -p 127.0.0.1:18001:18001 \     -p 127.0.0.1:18444:18444 \     kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql-kong-mysql适配版"><a href="#mysql-kong-mysql适配版" class="headerlink" title="mysql + kong  mysql适配版"></a>mysql + kong  mysql适配版</h2><p>#1 创建本地卷mysqldata<br>docker volume create mysqldata<br>#2 创建kong-net-mysql<br>docker network create kong-net-mysql<br>#3 创建 mysql-kong 容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name mysql-kong \               --network<span class="token operator">=</span>kong-net-mysql \               -v mysqldata:/var/mysql/data \               -p 3306:3306 \               -e <span class="token string">"MYSQL_USER=kong"</span> \               -e <span class="token string">"MYSQL_DB=kong"</span> \               -e <span class="token string">"MYSQL_PASSWORD=kong"</span> \               demonlee/mysql:5.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#4 初始化kong在mysql中的数据库</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --rm \     --network<span class="token operator">=</span>kong-net-mysql \     -e <span class="token string">"KONG_DATABASE=mysql"</span> \     -e <span class="token string">"KONG_MYSQL_HOST=mysql-kong"</span> \     -e <span class="token string">"KONG_MYSQL_PASSWORD=kong"</span> \     demonlee/kong:1.3 kong migrations bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#5 启动kong容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --name kong-mysql \     --network<span class="token operator">=</span>kong-net-mysql \     -e <span class="token string">"KONG_DATABASE=mysql"</span> \     -e <span class="token string">"KONG_MYSQL_HOST=mysql-kong"</span> \     -e <span class="token string">"KONG_MYSQL_PASSWORD=kong"</span> \     -e <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \     -e <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> \     -e <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> \     -e <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:28001, 0.0.0.0:28444 ssl"</span> \     -e <span class="token string">"KONG_PROXY_LISTEN=0.0.0.0:28000, 0.0.0.0:28443 ssl"</span> \     -p 28000:28000 \     -p 28443:28443 \     -p 28001:28001 \     -p 28444:28444 \     demonlee/kong:1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> API 网关KONG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
